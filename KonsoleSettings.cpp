// This file is generated by kconfig_compiler_kf5 from konsole.kcfg.
// All changes you do to this file will be lost.

#include "KonsoleSettings.h"

#include <qglobal.h>
#include <QFile>

using namespace terminal;

namespace terminal {

class KonsoleSettingsHelper
{
  public:
    KonsoleSettingsHelper() : q(nullptr) {}
    ~KonsoleSettingsHelper() { delete q; }
    KonsoleSettingsHelper(const KonsoleSettingsHelper&) = delete;
    KonsoleSettingsHelper& operator=(const KonsoleSettingsHelper&) = delete;
    KonsoleSettings *q;
};
}

Q_GLOBAL_STATIC(KonsoleSettingsHelper, s_globalKonsoleSettings)
KonsoleSettings *KonsoleSettings::self()
{
  if (!s_globalKonsoleSettings()->q) {
    new KonsoleSettings;
    s_globalKonsoleSettings()->q->read();
  }

  return s_globalKonsoleSettings()->q;
}

KonsoleSettings::KonsoleSettings(  )
  : KCoreConfigSkeleton( QStringLiteral( "konsolerc" ) )
{
  Q_ASSERT(!s_globalKonsoleSettings()->q);
  s_globalKonsoleSettings()->q = this;
  setCurrentGroup( QStringLiteral( "KonsoleWindow" ) );

  mShowMenuBarByDefaultItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "ShowMenuBarByDefault" ), mShowMenuBarByDefault, true );
  mShowMenuBarByDefaultItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Show menubar by default") );
  mShowMenuBarByDefaultItem->setToolTip( QCoreApplication::translate("KonsoleSettings", "Show menubar by default in each terminal window") );
  addItem( mShowMenuBarByDefaultItem, QStringLiteral( "ShowMenuBarByDefault" ) );
  mRemoveWindowTitleBarAndFrameItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "RemoveWindowTitleBarAndFrame" ), mRemoveWindowTitleBarAndFrame, false );
  mRemoveWindowTitleBarAndFrameItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Remove window titlebar and frame") );
  addItem( mRemoveWindowTitleBarAndFrameItem, QStringLiteral( "RemoveWindowTitleBarAndFrame" ) );
  mShowWindowTitleOnTitleBarItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "ShowWindowTitleOnTitleBar" ), mShowWindowTitleOnTitleBar, false );
  mShowWindowTitleOnTitleBarItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Show window title on the titlebar") );
  mShowWindowTitleOnTitleBarItem->setToolTip( QCoreApplication::translate("KonsoleSettings", "Show window title set by escape sequence on the titlebar") );
  addItem( mShowWindowTitleOnTitleBarItem, QStringLiteral( "ShowWindowTitleOnTitleBar" ) );
  mAllowMenuAcceleratorsItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "AllowMenuAccelerators" ), mAllowMenuAccelerators, false );
  mAllowMenuAcceleratorsItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Enable menu accelerators") );
  mAllowMenuAcceleratorsItem->setToolTip( QCoreApplication::translate("KonsoleSettings", "Allow users to access top menu through Alt+Key combination") );
  addItem( mAllowMenuAcceleratorsItem, QStringLiteral( "AllowMenuAccelerators" ) );
  mShowTerminalSizeHintItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "ShowTerminalSizeHint" ), mShowTerminalSizeHint, true );
  mShowTerminalSizeHintItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Show hint for terminal size after resizing") );
  mShowTerminalSizeHintItem->setToolTip( QCoreApplication::translate("KonsoleSettings", "Show terminal size in columns and lines in the center of window after resizing") );
  addItem( mShowTerminalSizeHintItem, QStringLiteral( "ShowTerminalSizeHint" ) );
  mSaveGeometryOnExitItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "SaveGeometryOnExit" ), mSaveGeometryOnExit, true );
  mSaveGeometryOnExitItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Use current window size on next startup") );
  mSaveGeometryOnExitItem->setToolTip( QCoreApplication::translate("KonsoleSettings", "The window size will be saved upon exiting terminal") );
  addItem( mSaveGeometryOnExitItem, QStringLiteral( "SaveGeometryOnExit" ) );
  mUseSingleInstanceItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "UseSingleInstance" ), mUseSingleInstance, false );
  mUseSingleInstanceItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Run all terminal windows in a single process") );
  mUseSingleInstanceItem->setToolTip( QCoreApplication::translate("KonsoleSettings", "When launching terminal re-use existing process if possible") );
  addItem( mUseSingleInstanceItem, QStringLiteral( "UseSingleInstance" ) );

  setCurrentGroup( QStringLiteral( "SearchSettings" ) );

  mSearchCaseSensitiveItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "SearchCaseSensitive" ), mSearchCaseSensitive, false );
  mSearchCaseSensitiveItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Search is case sensitive") );
  mSearchCaseSensitiveItem->setToolTip( QCoreApplication::translate("KonsoleSettings", "Sets whether the search is case sensitive") );
  addItem( mSearchCaseSensitiveItem, QStringLiteral( "SearchCaseSensitive" ) );
  mSearchRegExpressionItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "SearchRegExpression" ), mSearchRegExpression, false );
  mSearchRegExpressionItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Match using regular expressions") );
  addItem( mSearchRegExpressionItem, QStringLiteral( "SearchRegExpression" ) );
  mSearchHighlightMatchesItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "SearchHighlightMatches" ), mSearchHighlightMatches, true );
  mSearchHighlightMatchesItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Highlight all search matches") );
  mSearchHighlightMatchesItem->setToolTip( QCoreApplication::translate("KonsoleSettings", "Sets whether matching text should be highlighted") );
  addItem( mSearchHighlightMatchesItem, QStringLiteral( "SearchHighlightMatches" ) );
  mSearchReverseSearchItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "SearchReverseSearch" ), mSearchReverseSearch, true );
  mSearchReverseSearchItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Search backwards") );
  mSearchReverseSearchItem->setToolTip( QCoreApplication::translate("KonsoleSettings", "Sets whether search should start from the bottom") );
  addItem( mSearchReverseSearchItem, QStringLiteral( "SearchReverseSearch" ) );

  setCurrentGroup( QStringLiteral( "TabBar" ) );

  QList<KCoreConfigSkeleton::ItemEnum::Choice> valuesTabBarVisibility;
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("AlwaysShowTabBar");
    valuesTabBarVisibility.append( choice );
  }
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ShowTabBarWhenNeeded");
    valuesTabBarVisibility.append( choice );
  }
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("AlwaysHideTabBar");
    valuesTabBarVisibility.append( choice );
  }
  mTabBarVisibilityItem = new KCoreConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "TabBarVisibility" ), mTabBarVisibility, valuesTabBarVisibility, ShowTabBarWhenNeeded );
  mTabBarVisibilityItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Control the visibility of the whole tab bar") );
  addItem( mTabBarVisibilityItem, QStringLiteral( "TabBarVisibility" ) );
  QList<KCoreConfigSkeleton::ItemEnum::Choice> valuesTabBarPosition;
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("Top");
    valuesTabBarPosition.append( choice );
  }
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("Bottom");
    valuesTabBarPosition.append( choice );
  }
  mTabBarPositionItem = new KCoreConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "TabBarPosition" ), mTabBarPosition, valuesTabBarPosition, Bottom );
  mTabBarPositionItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Control the position of the tab bar") );
  addItem( mTabBarPositionItem, QStringLiteral( "TabBarPosition" ) );
  mTabBarStyleSheetItem = new KCoreConfigSkeleton::ItemString( currentGroup(), QStringLiteral( "TabBarStyleSheet" ), mTabBarStyleSheet, QStringLiteral( "QTabBar::tab { min-width: 2em ; max-width: 25em }" ) );
  mTabBarStyleSheetItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Control the visual style of the tab bar") );
  addItem( mTabBarStyleSheetItem, QStringLiteral( "TabBarStyleSheet" ) );
  mTabBarUseUserStyleSheetItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "TabBarUseUserStyleSheet" ), mTabBarUseUserStyleSheet, false );
  mTabBarUseUserStyleSheetItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Use a user-defined .css file for the tab bar") );
  addItem( mTabBarUseUserStyleSheetItem, QStringLiteral( "TabBarUseUserStyleSheet" ) );
  mTabBarUserStyleSheetFileItem = new KCoreConfigSkeleton::ItemUrl( currentGroup(), QStringLiteral( "TabBarUserStyleSheetFile" ), mTabBarUserStyleSheetFile );
  mTabBarUserStyleSheetFileItem->setLabel( QCoreApplication::translate("KonsoleSettings", "The .css file to use for the tab bar style") );
  addItem( mTabBarUserStyleSheetFileItem, QStringLiteral( "TabBarUserStyleSheetFile" ) );
  mCloseTabOnMiddleMouseButtonItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "CloseTabOnMiddleMouseButton" ), mCloseTabOnMiddleMouseButton, false );
  mCloseTabOnMiddleMouseButtonItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Allow middle-clicking on open tabs to close them") );
  addItem( mCloseTabOnMiddleMouseButtonItem, QStringLiteral( "CloseTabOnMiddleMouseButton" ) );
  mNewTabButtonItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "NewTabButton" ), mNewTabButton, false );
  mNewTabButtonItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Control the visibility of 'New Tab' button on the tab bar") );
  addItem( mNewTabButtonItem, QStringLiteral( "NewTabButton" ) );
  QList<KCoreConfigSkeleton::ItemEnum::Choice> valuesCloseTabButton;
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("OnEachTab");
    valuesCloseTabButton.append( choice );
  }
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("OnTabBar");
    valuesCloseTabButton.append( choice );
  }
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("None");
    valuesCloseTabButton.append( choice );
  }
  mCloseTabButtonItem = new KCoreConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "CloseTabButton" ), mCloseTabButton, valuesCloseTabButton, OnEachTab );
  mCloseTabButtonItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Control where the \"Close tab\" button will be displayed") );
  addItem( mCloseTabButtonItem, QStringLiteral( "CloseTabButton" ) );
  QList<KCoreConfigSkeleton::ItemEnum::Choice> valuesNewTabBehavior;
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("PutNewTabAtTheEnd");
    valuesNewTabBehavior.append( choice );
  }
  {
    KCoreConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("PutNewTabAfterCurrentTab");
    valuesNewTabBehavior.append( choice );
  }
  mNewTabBehaviorItem = new KCoreConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "NewTabBehavior" ), mNewTabBehavior, valuesNewTabBehavior, PutNewTabAtTheEnd );
  mNewTabBehaviorItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Control where to put the new tab") );
  addItem( mNewTabBehaviorItem, QStringLiteral( "NewTabBehavior" ) );
  mExpandTabWidthItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "ExpandTabWidth" ), mExpandTabWidth, false );
  mExpandTabWidthItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Expand the tab widths") );
  addItem( mExpandTabWidthItem, QStringLiteral( "ExpandTabWidth" ) );

  setCurrentGroup( QStringLiteral( "PrintOptions" ) );

  mPrinterFriendlyItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "PrinterFriendly" ), mPrinterFriendly, true );
  mPrinterFriendlyItem->setLabel( QCoreApplication::translate("KonsoleSettings", "Printer &friendly mode (black text, no background)") );
  addItem( mPrinterFriendlyItem, QStringLiteral( "PrinterFriendly" ) );
  mScaleOutputItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "ScaleOutput" ), mScaleOutput, true );
  mScaleOutputItem->setLabel( QCoreApplication::translate("KonsoleSettings", "&Scale output") );
  addItem( mScaleOutputItem, QStringLiteral( "ScaleOutput" ) );

  setCurrentGroup( QStringLiteral( "FileLocation" ) );

  mScrollbackUseSystemLocationItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "scrollbackUseSystemLocation" ), mScrollbackUseSystemLocation, true );
  mScrollbackUseSystemLocationItem->setLabel( QCoreApplication::translate("KonsoleSettings", "For scrollback files, use system-wide folder location") );
  addItem( mScrollbackUseSystemLocationItem, QStringLiteral( "scrollbackUseSystemLocation" ) );
  mScrollbackUseCacheLocationItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "scrollbackUseCacheLocation" ), mScrollbackUseCacheLocation, false );
  mScrollbackUseCacheLocationItem->setLabel( QCoreApplication::translate("KonsoleSettings", "For scrollback files, use user's specific folder location") );
  addItem( mScrollbackUseCacheLocationItem, QStringLiteral( "scrollbackUseCacheLocation" ) );
  mScrollbackUseSpecifiedLocationItem = new KCoreConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "scrollbackUseSpecifiedLocation" ), mScrollbackUseSpecifiedLocation, false );
  mScrollbackUseSpecifiedLocationItem->setLabel( QCoreApplication::translate("KonsoleSettings", "For scrollback files, use specified folder location") );
  addItem( mScrollbackUseSpecifiedLocationItem, QStringLiteral( "scrollbackUseSpecifiedLocation" ) );
  mScrollbackUseSpecifiedLocationDirectoryItem = new KCoreConfigSkeleton::ItemUrl( currentGroup(), QStringLiteral( "scrollbackUseSpecifiedLocationDirectory" ), mScrollbackUseSpecifiedLocationDirectory );
  mScrollbackUseSpecifiedLocationDirectoryItem->setLabel( QCoreApplication::translate("KonsoleSettings", "For scrollback files, use this folder") );
  addItem( mScrollbackUseSpecifiedLocationDirectoryItem, QStringLiteral( "scrollbackUseSpecifiedLocationDirectory" ) );
}

KonsoleSettings::~KonsoleSettings()
{
  s_globalKonsoleSettings()->q = nullptr;
}

